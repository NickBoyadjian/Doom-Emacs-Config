#+title: Doom emacs config
#+author: Nick Boyadjian
#+options: num:nil

* Basic setup
Here we set up basic values like name, email, font, etc...
#+begin_src emacs-lisp
(setq user-full-name "Nick Boyadjian"
      user-mail-address "nick.boyadjian@podium.com"
      doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 15)
      display-line-numbers-type 'relative
      projectile-project-search-path '("~/projects/podium")
      fancy-splash-image "~/Pictures/luffy.png")
#+end_src
** Color theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

** Custom set faces
#+begin_src emacs-lisp
(custom-set-faces
  '(org-document-title ((t (:height 1.6 :underline nil)))))
#+end_src
* Global functions
**  Open notes
Open notes file in a side window
#+begin_src emacs-lisp
(defun nick/open-notes ()
  (interactive)
    (display-buffer (find-file-noselect "~/org/notes.org")
                    '(display-buffer-in-side-window . (( side . right ))))
    (other-window 1))

(map! :leader
      :desc "Open notes file"
      "o n" #'nick/open-notes)
#+end_src
**  Open agenda
Open agenda in a side window
#+begin_src emacs-lisp
(defun nick/open-agenda-file()
  (interactive)
    (display-buffer (find-file-noselect "~/org/todo.org")
                    '(display-buffer-in-side-window . (( side . right ))))
    (other-window 1))

(map! :leader
      :desc "Open notes file"
      "o N" #'nick/open-agenda-file)
#+end_src

**  Toggle Apheleia mode
Toggles Apheleia mode to turn on/off formatting in the current buffer
#+begin_src emacs-lisp
(map! :leader
      :desc "Apheleia mode"
      "t a" 'apheleia-mode)
#+end_src
**  Search project with vertico
Toggles Apheleia mode to turn on/off formatting in the current buffer
#+begin_src emacs-lisp
(map! :leader
      :desc "Search project with Veritco"
      "s P" '+vertico/project-search)
#+end_src
* Org Mode
#+begin_src emacs-lisp
(after! org
  (setq
   org-ellipsis " ↓ "
   org-directory "~/org/"
   org-startup-folded t))
#+end_src
** Fonts
#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "FiraCode Nerd Font" :size 15))))
 '(fixed-pitch ((t ( :family "FiraCode Nerd Font" :height 160)))))

 (add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

#+begin_src emacs-lisp
(after! org
  (set-ligatures! 'org-mode
    :merge t
    :checkbox      "[ ]"
    :pending       "[-]"
    :checkedbox    "[X]"
    :list_property "::"
    :em_dash       "---"
    :ellipsis      "..."
    :arrow_right   "->"
    :arrow_left    "<-"
    :title         "#+title:"
    :subtitle      "#+subtitle:"
    :author        "#+author:"
    :date          "#+date:"
    :property      "#+property:"
    :options       "#+options:"
    :startup       "#+startup:"
    :macro         "#+macro:"
    :html_head     "#+html_head:"
    :html          "#+html:"
    :latex_class   "#+latex_class:"
    :latex_header  "#+latex_header:"
    :beamer_header "#+beamer_header:"
    :latex         "#+latex:"
    :attr_latex    "#+attr_latex:"
    :attr_html     "#+attr_html:"
    :attr_org      "#+attr_org:"
    :begin_quote   "#+begin_quote"
    :end_quote     "#+end_quote"
    :caption       "#+caption:"
    :header        "#+header:"
    :begin_export  "#+begin_export"
    :end_export    "#+end_export"
    :results       "#+RESULTS:"
    :property      ":PROPERTIES:"
    :end           ":END:"
    :priority_a    "[#A]"
    :priority_b    "[#B]"
    :priority_c    "[#C]"
    :priority_d    "[#D]"
    :priority_e    "[#E]"
    :roam_tags     "#+roam_tags:"
    :filetags      "#+filetags:"
  ))
#+end_src
** Org-Modern
#+begin_src emacs-lisp
(setq ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-fold-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t
 org-pretty-entities t
 org-ellipsis "…"

 ;; Agenda styling
 org-agenda-tags-column 0
 org-agenda-block-separator ?─
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 org-agenda-current-time-string
 "⭠ now ─────────────────────────────────────────────────")
(global-org-modern-mode)
#+end_src
** Org babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t))
 '((verb . t)))
#+end_src
* Programming languages
** Javascript
*** Start prettier
#+begin_src emacs-lisp
(add-hook 'js2-mode-hook
          'prettier-js-mode)
(setq js2-basic-offset 4)
#+end_src
*** Run tests
#+begin_src emacs-lisp
(map! :after js2-mode
        :localleader
        :map js2-mode-map
        :prefix ("t" . "test")
        "v" #'jest-test-run
        "s" #'jest-test-run-at-point)
#+end_src
** Elixir
*** Lsp + alchemy
#+begin_src emacs-lisp
;; Always start lsp in elixir files
(add-hook 'elixir-mode-hook #'lsp)

(after! lsp-mode
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("~/build/lexical/_build/dev/package/lexical/bin/start_lexical.sh"))
                    :multi-root t
                    :activation-fn (lsp-activate-on "elixir")
                    :server-id 'lexical-ls)))

(use-package alchemist
  :diminish (alchemist-mode alchemist-phoenix-mode)
  :hook ((elixir-mode . alchemist-mode)
         (elixir-mode . alchemist-phoenix-mode)))
#+end_src
*** Org babel
#+begin_src emacs-lisp
;; git clone https://github.com/victorolinasc/ob-elixir.git
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'ob-elixir)

;; example of adding languages to babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((elixir . t)))
#+end_src
*** Enter pipe binding
When in elixir-mode, press <C-return> to create a new line with a pipe
#+begin_src emacs-lisp
(defun nick/enter-pipe ()
  (interactive)
  (let ((oldpos (point)))
    (end-of-line)
    (newline-and-indent)
    (insert "|> ")))

(add-hook 'elixir-mode-hook
          (lambda ()
            (define-key evil-insert-state-local-map
                        (kbd "<C-return>") 'nick/enter-pipe)))

#+end_src
*** Repl (inf-elixir)
#+begin_src emacs-lisp
;; (use-package! inf-elixir
  ;; :config
(defun inf-elixir-phx-server ()
  (interactive)
    (inf-elixir-project "iex -S mix phx.server"))

 (map! :after elixir-mode
        :localleader
        :map elixir-mode-map
        :prefix ("i" . "repl")
        "i" 'inf-elixir
        "p" 'inf-elixir-phx-server
        ;; "p" 'inf-elixir-project
        "l" 'inf-elixir-send-line
        "r" 'inf-elixir-send-region
        "b" 'inf-elixir-send-buffer
        "R" 'inf-elixir-reload-module)
#+end_src
** Gleam
#+begin_src emacs-lisp
(use-package gleam-mode
  :load-path "~/.emacs.d/lisp/gleam-mode")
#+end_src

* LSP
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-idle-delay 1.0
        lsp-log-io nil
        lsp-use-plists t
        read-process-output-max (* 1024 1024)) ;; 1mb
  gc-cons-threshold (* 1024 1024 100)) ;; 100MiB

(defadvice! +lsp-diagnostics--flycheck-buffer ()
  :override #'lsp-diagnostics--flycheck-buffer
  "Trigger flycheck on buffer."
  (remove-hook 'lsp-on-idle-hook #'lsp-diagnostics--flycheck-buffer t)
  (when (bound-and-true-p flycheck-mode)
    (flycheck-buffer)))


(after! lsp-mode
  (setq lsp-lens-enable t
        lsp-semantic-tokens-enable t ;; hide unreachable ifdefs
        lsp-enable-symbol-highlighting t
        lsp-headerline-breadcrumb-enable nil
        lsp-ui-sideline-enable nil
        lsp-ui-sideline-show-hover nil
        lsp-ui-sideline-show-symbol nil
        lsp-ui-sideline-show-diagnostics nil
        lsp-ui-sideline-show-code-actions nil
        lsp-elixir-suggest-specs nil))
#+end_src
* UI packages
** Modeline
#+begin_src emacs-lisp
(use-package! doom-nano-modeline
  :init
  (setq doom-nano-modeline-position 'bottom)

  :config
  (doom-nano-modeline-mode 1))
#+end_src
** Ranger
#+begin_src emacs-lisp
(map! :leader
      :desc "Open ranger"
      "o ." #'ranger)
#+end_src
** Blamer
#+begin_src emacs-lisp
(use-package blamer
  :bind (("s-i" . blamer-show-commit-info))
  :defer 20
  :custom
  (blamer-idle-time 0.3)
  (blamer-min-offset 70)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                    :background nil
                    :height 140
                    :italic t)))
  :config
  (global-blamer-mode -1))
#+end_src
** Treemacs
#+begin_src emacs-lisp
(use-package! treemacs-all-the-icons
  :config
  (treemacs-load-theme 'nerd-icons)
  (setq doom-themes-treemacs-theme 'nerd-icons)
  (map! :desc "Select Treemacs window" "<f8>" #'treemacs-select-window)

  ;; Open current file in treemacs
  (defun nick/open-file-in-treemacs ()
    (interactive)
    (treemacs-find-file)
    (treemacs-select-window))


  (map! :leader
        :desc "Find file in treemacs"
        "o P" #'nick/open-file-in-treemacs)

  (treemacs-follow-mode)
  (treemacs-toggle-fixed-width))
#+end_src

* Prettier
#+begin_src
(use-package prettier
  :hook ((typescript-mode . prettier-mode)
         (js-mode . prettier-mode)
         (json-mode . prettier-mode)
         (yaml-mode . prettier-mode)
         (elixir-mode . prettier-mode)))
#+end_src

* Workspaces
#+begin_src emacs-lisp
(custom-set-faces!
  '(+workspace-tab-face :inherit default :family "Jost" :height 135)
  '(+workspace-tab-selected-face :inherit (highlight +workspace-tab-face)))

(after! persp-mode
  (defun workspaces-formatted ()
    (+doom-dashboard--center (frame-width)
                             (let ((names (or persp-names-cache nil))
                                   (current-name (safe-persp-name (get-current-persp))))
                               (mapconcat
                                #'identity
                                (cl-loop for name in names
                                         for i to (length names)
                                         collect
                                         (concat (propertize (format " %d" (1+ i)) 'face
                                                             `(:inherit ,(if (equal current-name name)
                                                                             '+workspace-tab-selected-face
                                                                           '+workspace-tab-face)
                                                               :weight bold))
                                                 (propertize (format " %s " name) 'face
                                                             (if (equal current-name name)
                                                                 '+workspace-tab-selected-face
                                                               '+workspace-tab-face))))
                                " "))))
)
;; need to run this later for it to not break frame size for some reason
;; (run-at-time nil nil (cmd! (tab-bar-mode +1)))
#+end_src

* Verb (http client)
#+begin_src emacs-lisp
(map! :after org
      :localleader
      :map org-mode-map
      :prefix ("v" . "verb")
      "s" #'verb-send-request-on-point)

(defun verb-graphql (rs)
  "Transform verb RS to GraphQL request."
  (let* ((before-body (oref rs body))
         (splited-body (split-string before-body "\n\n"))
         (query (nth 0 splited-body))
         (variables (nth 1 splited-body))
         (json-object-type 'alist)
         (parsed-variables (if variables (json-parse-string variables) '()))
         (new-body (json-encode `((query . ,query) (variables . ,parsed-variables)))))
    (oset rs body new-body)
    rs))
#+end_src
